// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: kafka_messages.proto

package kafka_messages_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Message sent from TaskManager to TaskWorker to request task execution
type KafkaTaskDispatch struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TaskId         uint32                 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskTemplateId uint32                 `protobuf:"varint,2,opt,name=task_template_id,json=taskTemplateId,proto3" json:"task_template_id,omitempty"`
	Name           string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Params         string                 `protobuf:"bytes,4,opt,name=params,proto3" json:"params,omitempty"`                                 // JSON string for task parameters
	ExecutorType   string                 `protobuf:"bytes,5,opt,name=executor_type,json=executorType,proto3" json:"executor_type,omitempty"` // Specifies which worker/plugin handles this task type
	ParamSchema    string                 `protobuf:"bytes,6,opt,name=param_schema,json=paramSchema,proto3" json:"param_schema,omitempty"`    // Optional: JSON schema for params, for worker-side validation
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *KafkaTaskDispatch) Reset() {
	*x = KafkaTaskDispatch{}
	mi := &file_kafka_messages_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KafkaTaskDispatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaTaskDispatch) ProtoMessage() {}

func (x *KafkaTaskDispatch) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_messages_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaTaskDispatch.ProtoReflect.Descriptor instead.
func (*KafkaTaskDispatch) Descriptor() ([]byte, []int) {
	return file_kafka_messages_proto_rawDescGZIP(), []int{0}
}

func (x *KafkaTaskDispatch) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *KafkaTaskDispatch) GetTaskTemplateId() uint32 {
	if x != nil {
		return x.TaskTemplateId
	}
	return 0
}

func (x *KafkaTaskDispatch) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KafkaTaskDispatch) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

func (x *KafkaTaskDispatch) GetExecutorType() string {
	if x != nil {
		return x.ExecutorType
	}
	return ""
}

func (x *KafkaTaskDispatch) GetParamSchema() string {
	if x != nil {
		return x.ParamSchema
	}
	return ""
}

// Message sent from TaskWorker to TaskManager with the result of a task execution
type KafkaTaskCompletion struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        uint32                 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`                                 // e.g., COMPLETED, FAILED
	Result        string                 `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`                                 // JSON string for task result (if status is COMPLETED)
	ErrorMessage  string                 `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` // Error details (if status is FAILED)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KafkaTaskCompletion) Reset() {
	*x = KafkaTaskCompletion{}
	mi := &file_kafka_messages_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KafkaTaskCompletion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaTaskCompletion) ProtoMessage() {}

func (x *KafkaTaskCompletion) ProtoReflect() protoreflect.Message {
	mi := &file_kafka_messages_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaTaskCompletion.ProtoReflect.Descriptor instead.
func (*KafkaTaskCompletion) Descriptor() ([]byte, []int) {
	return file_kafka_messages_proto_rawDescGZIP(), []int{1}
}

func (x *KafkaTaskCompletion) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *KafkaTaskCompletion) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *KafkaTaskCompletion) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *KafkaTaskCompletion) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_kafka_messages_proto protoreflect.FileDescriptor

const file_kafka_messages_proto_rawDesc = "" +
	"\n" +
	"\x14kafka_messages.proto\x12\vproto.kafka\"\xca\x01\n" +
	"\x11KafkaTaskDispatch\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\rR\x06taskId\x12(\n" +
	"\x10task_template_id\x18\x02 \x01(\rR\x0etaskTemplateId\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x16\n" +
	"\x06params\x18\x04 \x01(\tR\x06params\x12#\n" +
	"\rexecutor_type\x18\x05 \x01(\tR\fexecutorType\x12!\n" +
	"\fparam_schema\x18\x06 \x01(\tR\vparamSchema\"\x83\x01\n" +
	"\x13KafkaTaskCompletion\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\rR\x06taskId\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\x12\x16\n" +
	"\x06result\x18\x03 \x01(\tR\x06result\x12#\n" +
	"\rerror_message\x18\x04 \x01(\tR\ferrorMessageBDZBtask-management-service/pkg/pb/kafka_messages_pb;kafka_messages_pbb\x06proto3"

var (
	file_kafka_messages_proto_rawDescOnce sync.Once
	file_kafka_messages_proto_rawDescData []byte
)

func file_kafka_messages_proto_rawDescGZIP() []byte {
	file_kafka_messages_proto_rawDescOnce.Do(func() {
		file_kafka_messages_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_kafka_messages_proto_rawDesc), len(file_kafka_messages_proto_rawDesc)))
	})
	return file_kafka_messages_proto_rawDescData
}

var file_kafka_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_kafka_messages_proto_goTypes = []any{
	(*KafkaTaskDispatch)(nil),   // 0: proto.kafka.KafkaTaskDispatch
	(*KafkaTaskCompletion)(nil), // 1: proto.kafka.KafkaTaskCompletion
}
var file_kafka_messages_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_kafka_messages_proto_init() }
func file_kafka_messages_proto_init() {
	if File_kafka_messages_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_kafka_messages_proto_rawDesc), len(file_kafka_messages_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kafka_messages_proto_goTypes,
		DependencyIndexes: file_kafka_messages_proto_depIdxs,
		MessageInfos:      file_kafka_messages_proto_msgTypes,
	}.Build()
	File_kafka_messages_proto = out.File
	file_kafka_messages_proto_goTypes = nil
	file_kafka_messages_proto_depIdxs = nil
}
