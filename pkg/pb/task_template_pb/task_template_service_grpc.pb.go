// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: task_template_service.proto

package task_template_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TaskTemplateService_CreateTaskTemplate_FullMethodName = "/proto.task_template.TaskTemplateService/CreateTaskTemplate"
	TaskTemplateService_GetTaskTemplate_FullMethodName    = "/proto.task_template.TaskTemplateService/GetTaskTemplate"
	TaskTemplateService_ListTaskTemplates_FullMethodName  = "/proto.task_template.TaskTemplateService/ListTaskTemplates"
	TaskTemplateService_UpdateTaskTemplate_FullMethodName = "/proto.task_template.TaskTemplateService/UpdateTaskTemplate"
	TaskTemplateService_DeleteTaskTemplate_FullMethodName = "/proto.task_template.TaskTemplateService/DeleteTaskTemplate"
)

// TaskTemplateServiceClient is the client API for TaskTemplateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskTemplateServiceClient interface {
	CreateTaskTemplate(ctx context.Context, in *CreateTaskTemplateRequest, opts ...grpc.CallOption) (*CreateTaskTemplateResponse, error)
	GetTaskTemplate(ctx context.Context, in *GetTaskTemplateRequest, opts ...grpc.CallOption) (*GetTaskTemplateResponse, error)
	ListTaskTemplates(ctx context.Context, in *ListTaskTemplatesRequest, opts ...grpc.CallOption) (*ListTaskTemplatesResponse, error)
	UpdateTaskTemplate(ctx context.Context, in *UpdateTaskTemplateRequest, opts ...grpc.CallOption) (*UpdateTaskTemplateResponse, error)
	DeleteTaskTemplate(ctx context.Context, in *DeleteTaskTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type taskTemplateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskTemplateServiceClient(cc grpc.ClientConnInterface) TaskTemplateServiceClient {
	return &taskTemplateServiceClient{cc}
}

func (c *taskTemplateServiceClient) CreateTaskTemplate(ctx context.Context, in *CreateTaskTemplateRequest, opts ...grpc.CallOption) (*CreateTaskTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTaskTemplateResponse)
	err := c.cc.Invoke(ctx, TaskTemplateService_CreateTaskTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskTemplateServiceClient) GetTaskTemplate(ctx context.Context, in *GetTaskTemplateRequest, opts ...grpc.CallOption) (*GetTaskTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTaskTemplateResponse)
	err := c.cc.Invoke(ctx, TaskTemplateService_GetTaskTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskTemplateServiceClient) ListTaskTemplates(ctx context.Context, in *ListTaskTemplatesRequest, opts ...grpc.CallOption) (*ListTaskTemplatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTaskTemplatesResponse)
	err := c.cc.Invoke(ctx, TaskTemplateService_ListTaskTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskTemplateServiceClient) UpdateTaskTemplate(ctx context.Context, in *UpdateTaskTemplateRequest, opts ...grpc.CallOption) (*UpdateTaskTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTaskTemplateResponse)
	err := c.cc.Invoke(ctx, TaskTemplateService_UpdateTaskTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskTemplateServiceClient) DeleteTaskTemplate(ctx context.Context, in *DeleteTaskTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TaskTemplateService_DeleteTaskTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskTemplateServiceServer is the server API for TaskTemplateService service.
// All implementations must embed UnimplementedTaskTemplateServiceServer
// for forward compatibility.
type TaskTemplateServiceServer interface {
	CreateTaskTemplate(context.Context, *CreateTaskTemplateRequest) (*CreateTaskTemplateResponse, error)
	GetTaskTemplate(context.Context, *GetTaskTemplateRequest) (*GetTaskTemplateResponse, error)
	ListTaskTemplates(context.Context, *ListTaskTemplatesRequest) (*ListTaskTemplatesResponse, error)
	UpdateTaskTemplate(context.Context, *UpdateTaskTemplateRequest) (*UpdateTaskTemplateResponse, error)
	DeleteTaskTemplate(context.Context, *DeleteTaskTemplateRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTaskTemplateServiceServer()
}

// UnimplementedTaskTemplateServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaskTemplateServiceServer struct{}

func (UnimplementedTaskTemplateServiceServer) CreateTaskTemplate(context.Context, *CreateTaskTemplateRequest) (*CreateTaskTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskTemplate not implemented")
}
func (UnimplementedTaskTemplateServiceServer) GetTaskTemplate(context.Context, *GetTaskTemplateRequest) (*GetTaskTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskTemplate not implemented")
}
func (UnimplementedTaskTemplateServiceServer) ListTaskTemplates(context.Context, *ListTaskTemplatesRequest) (*ListTaskTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTaskTemplates not implemented")
}
func (UnimplementedTaskTemplateServiceServer) UpdateTaskTemplate(context.Context, *UpdateTaskTemplateRequest) (*UpdateTaskTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskTemplate not implemented")
}
func (UnimplementedTaskTemplateServiceServer) DeleteTaskTemplate(context.Context, *DeleteTaskTemplateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTaskTemplate not implemented")
}
func (UnimplementedTaskTemplateServiceServer) mustEmbedUnimplementedTaskTemplateServiceServer() {}
func (UnimplementedTaskTemplateServiceServer) testEmbeddedByValue()                             {}

// UnsafeTaskTemplateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskTemplateServiceServer will
// result in compilation errors.
type UnsafeTaskTemplateServiceServer interface {
	mustEmbedUnimplementedTaskTemplateServiceServer()
}

func RegisterTaskTemplateServiceServer(s grpc.ServiceRegistrar, srv TaskTemplateServiceServer) {
	// If the following call pancis, it indicates UnimplementedTaskTemplateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaskTemplateService_ServiceDesc, srv)
}

func _TaskTemplateService_CreateTaskTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskTemplateServiceServer).CreateTaskTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskTemplateService_CreateTaskTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskTemplateServiceServer).CreateTaskTemplate(ctx, req.(*CreateTaskTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskTemplateService_GetTaskTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskTemplateServiceServer).GetTaskTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskTemplateService_GetTaskTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskTemplateServiceServer).GetTaskTemplate(ctx, req.(*GetTaskTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskTemplateService_ListTaskTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskTemplateServiceServer).ListTaskTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskTemplateService_ListTaskTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskTemplateServiceServer).ListTaskTemplates(ctx, req.(*ListTaskTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskTemplateService_UpdateTaskTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskTemplateServiceServer).UpdateTaskTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskTemplateService_UpdateTaskTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskTemplateServiceServer).UpdateTaskTemplate(ctx, req.(*UpdateTaskTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskTemplateService_DeleteTaskTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskTemplateServiceServer).DeleteTaskTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskTemplateService_DeleteTaskTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskTemplateServiceServer).DeleteTaskTemplate(ctx, req.(*DeleteTaskTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskTemplateService_ServiceDesc is the grpc.ServiceDesc for TaskTemplateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskTemplateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.task_template.TaskTemplateService",
	HandlerType: (*TaskTemplateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTaskTemplate",
			Handler:    _TaskTemplateService_CreateTaskTemplate_Handler,
		},
		{
			MethodName: "GetTaskTemplate",
			Handler:    _TaskTemplateService_GetTaskTemplate_Handler,
		},
		{
			MethodName: "ListTaskTemplates",
			Handler:    _TaskTemplateService_ListTaskTemplates_Handler,
		},
		{
			MethodName: "UpdateTaskTemplate",
			Handler:    _TaskTemplateService_UpdateTaskTemplate_Handler,
		},
		{
			MethodName: "DeleteTaskTemplate",
			Handler:    _TaskTemplateService_DeleteTaskTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task_template_service.proto",
}
